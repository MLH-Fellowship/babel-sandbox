import React, { Fragment, useState } from "react";
import { parse } from "@babel/parser";
import { Grid, Menu, Accordion, Segment } from "semantic-ui-react";

/* DFS through AST generated by Babel parser */

function Primitive(key, val) {
  return (
    <Accordion.Content>
      {key && key + " : "}
      {String(val)}
    </Accordion.Content>
  );
}

function CompositeArr(key, arr) {
  const components = arr.map((value, index) => {
    return (
      <Fragment key={index}>
        {typeof value === "object" && value !== null
          ? Composite("", value)
          : Primitive("", value)}
      </Fragment>
    );
  });

  return arr.length ? (
    <Accordion.Accordion
      panels={[
        { title: `${key} : [ ${arr.length} element ]`, content: components },
      ]}
    />
  ) : (
    Primitive(key, "[ ]")
  );
}

function CompositeObj(key, obj) {
  const { type, ...children } = obj;
  const keys = Object.keys(obj);
  const components = Object.entries(children).map((value, index) => {
    const [k, v] = value;
    return (
      <Fragment key={index}>
        {typeof v === "object" && v !== null
          ? Composite(k, v)
          : Primitive(k, v)}
      </Fragment>
    );
  });
  const label = type ? type : key;
  return keys.length ? (
    <Accordion.Accordion
      panels={[
        { title: `${label} : { ${keys.join(", ")} }`, content: components },
      ]}
    />
  ) : (
    Primitive(label, "{ }")
  );
}

function Composite(key, ast) {
  return !Array.isArray(ast) ? CompositeObj(key, ast) : CompositeArr(key, ast);
}

function Viz({ code, cursor }) {
  try {
    const ast = parse(code);
    return (
      <Segment attached="bottom">
        <Accordion
          defaultActiveIndex={0}
          panels={[{ content: Composite("", ast) }]}
          fluid
          styled
        />
      </Segment>
    );
  } catch (err) {
    return Primitive("", err.message);
  }
}

export default function VizOutput({ code, cursor }) {
  return (
    <Grid.Row>
      <Grid.Column>
        <Menu attached="top" tabular inverted>
          <Menu.Item>AST Explorer</Menu.Item>
        </Menu>
        <Viz code={code} cursor={cursor} />
      </Grid.Column>
    </Grid.Row>
  );
}
