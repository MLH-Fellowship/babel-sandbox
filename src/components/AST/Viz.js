import React, { Fragment, useState } from "react";
import { parse } from "@babel/parser";
import { Grid } from "semantic-ui-react";
import { ASTButton, ASTSegment } from "../styles";

/* DFS through AST generated by Babel parser */

function Primitive(key, val) {
  return (
    <ASTSegment>
      <ASTButton />
      {key}
      {" : "}
      {String(val)}
    </ASTSegment>
  );
}

function CompositeArr(key, arr) {
  const [expanded, setExpanded] = useState(false);
  const components = arr.map((value, index) => {
    return (
      <Fragment key={index}>
        {typeof value === "object" && value !== null
          ? Composite("", value)
          : Primitive("", value)}
      </Fragment>
    );
  });

  return arr.length ? (
    <ASTSegment>
      <ASTButton onClick={() => setExpanded(!expanded)}>
        {expanded ? "-" : "+"}
      </ASTButton>
      {key}
      {" [ "}
      {expanded ? components : `${arr.length} element`}
      {expanded && <ASTButton />}
      {" ] "}
    </ASTSegment>
  ) : (
    <ASTSegment>
      <ASTButton />
      {key + " : [ ]"}
    </ASTSegment>
  );
}

function CompositeObj(key, obj) {
  const [expanded, setExpanded] = useState(false);
  const { type, ...children } = obj;
  const keys = Object.keys(obj);
  const components = Object.entries(children).map((value, index) => {
    const [k, v] = value;
    return (
      <Fragment key={index}>
        {typeof v === "object" && v !== null
          ? Composite(k, v)
          : Primitive(k, v)}
      </Fragment>
    );
  });
  return keys.length ? (
    <ASTSegment>
      <ASTButton onClick={() => setExpanded(!expanded)}>
        {expanded ? "-" : "+"}
      </ASTButton>
      {type ? type : key}
      {" { "}
      {expanded ? components : ` ${keys.join(", ")} `}
      {expanded && <ASTButton />}
      {" } "}
    </ASTSegment>
  ) : (
    <ASTSegment>
      <ASTButton />
      {type ? type : key}
      {" : { }"}
    </ASTSegment>
  );
}

function Composite(key, ast) {
  return (
    <Grid.Row>
      <Grid.Column>
        {Array.isArray(ast) ? CompositeArr(key, ast) : CompositeObj(key, ast)}
      </Grid.Column>
    </Grid.Row>
  );
}

export function Viz(code, cursor, settings) {
  const ast = parse(`console.log("hello")`);
  return Composite("", ast);
}
